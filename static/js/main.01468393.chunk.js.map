{"version":3,"sources":["variables.js","components/Terminal/Terminal.js","components/Icon/Icon.js","App.js","serviceWorker.js","index.js"],"names":["commandsOutput","help","about","Terminal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","command","index","commandsArchive","terminal","scrolling","getKey","bind","assertThisInitialized","e","key","slice","length","fireCommand","setState","archive","_this2","output","concat","commandObj","push","react_default","a","createElement","style","width","map","el","out","split","line","Fragment","className","directory","terminalArchive","height","maximized","_this3","lib","bounds","default","x","position","y","minWidth","minHeight","disableDragging","drag","size","onKeyDown","tabIndex","onMouseEnter","onMouseLeave","onClick","toggle","id","maximize","Component","Icon","name","onDoubleClick","src","alt","App","iconSize","windows","uniqid","toggleWindow","array","toConsumableArray","i","findIndex","splice","objectSpread","defineProperty","openWindow","console","log","components_Icon_Icon","components_Terminal_Terminal","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01468393.chunk.js","sourcesContent":["const commandsOutput = {\n    help: `\n    Available commands so far:\n    about - show description of this project,\n    help - show this output\n    `,\n    about: \"Open source React project trying to recreate Ubuntu OS view in browser window with basic functionality.\"\n}\nexport{\n    commandsOutput\n }\n","import React, { Component } from 'react';\nimport { Rnd } from 'react-rnd';\n\nimport { commandsOutput } from '../../variables';\nimport './Terminal.scss';\n\nclass Terminal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            command: \"help\",\n            index: 0,\n            commandsArchive: [],\n            terminal: {\n                scrolling: true\n            }\n        }\n        this.getKey = this.getKey.bind(this);\n    }\n\n    getKey(e) {\n        let key = e.key;\n        let command = this.state.command;\n        if (key === 'Backspace') {\n            command = command.slice(0, command.length - 1);\n        } else if (key === 'Enter') {\n            command = '';\n            this.fireCommand()\n        } else if(key === \"ArrowUp\"){\n            this.setState({\n                index: this.state.index>0 ? this.state.index-1 : 0\n            })\n            let archive = this.state.commandsArchive[this.state.index];\n            command =  typeof archive === \"object\" ? archive.command : '';\n        } else if(key === \"ArrowDown\"){\n            this.setState({\n                index: this.state.index<this.state.commandsArchive.length ? this.state.index+1 : 0\n            })\n            let archive = this.state.commandsArchive[this.state.index];\n            command =  typeof archive === \"object\" ? archive.command : '';\n        } else if (key.length === 1) {\n            command += key;\n        }\n        this.setState({\n            command: command\n        })\n    }\n\n    fireCommand() {\n        let commandsArchive = this.state.commandsArchive;\n        let output = commandsOutput[this.state.command];\n        if (!output) {\n            output = `${this.state.command}: command not found`\n        }\n        let commandObj = {\n            command: this.state.command,\n            output: output\n        }\n        commandsArchive.push(commandObj);\n\n        let archive =\n            <div style={{ width: '100%' }}>\n                {\n                    commandsArchive.map(el => {\n                        let out = el.output.split(\"\\n\").map(line => <p>{line}<br /></p>);\n                        return (\n                            <>\n                                <div className={\"prompt\"}>\n                                    <span className=\"user\">karol@ubuntu</span>:<span className=\"location\">{this.props.directory}</span>$\n                <span className=\"command\">{el.command}</span>\n                                </div>\n                                <div>\n                                    {out}\n                                </div>\n                            </>\n                        )\n                    })\n                }\n            </div>\n\n        this.setState({\n            command: \"\",\n            commandsArchive: commandsArchive,\n            terminalArchive: archive,\n            index: commandsArchive.length\n        });\n    }\n\n    maximize() {\n        this.setState({\n            height: \"100%\",\n            width: \"100%\",\n            maximized: !this.state.maximized\n        })\n    }\n\n    render() {\n        return (\n            <Rnd bounds=\"window\" default={{\n                x: this.props.position.x,\n                y: this.props.position.y,\n                width: 500,\n                height: 300\n            }} minWidth={250} minHeight={200}\n                disableDragging={!this.state.terminal.drag}\n                size={this.state.maximized ? {\n                    width: this.state.width,\n                    height: this.state.height\n                } : null}\n                position={this.state.maximized ? {\n                    x: 0,\n                    y: 0\n                } : null}\n            >\n                <div className=\"terminal\" onKeyDown={this.getKey} tabIndex='0'>\n                    <div className=\"toolbar\" onMouseEnter={() => this.setState({ terminal: { drag: true } })}\n                        onMouseLeave={() => this.setState({ terminal: { drag: false } })}>\n                        <div className=\"buttons\">\n                            <button onClick={() => this.props.toggle(\"terminal\", this.props.id)} className=\"exit\">x</button>\n                            <button className=\"minimize\">─</button>\n                            <button onClick={() => this.maximize()}>◻</button>\n                        </div>\n                        <p className=\"user\">\n                            karol@ubuntu:{this.props.directory}\n                        </p>\n                    </div>\n                    <div className=\"terminalBody\">\n                        {this.state.terminalArchive}\n                        <div className=\"prompt\">\n                            <span className=\"user\">karol@ubuntu</span>:\n                            <span className=\"location\">{this.props.directory}</span>$\n                            <span className=\"command\">{this.state.command}</span>\n                            <span className=\"cursor\"></span>\n                        </div>\n                    </div>\n                </div>\n            </Rnd>\n        )\n    }\n}\n\nexport default Terminal;","import React, { Component } from 'react';\n\nconst Icon = (props) => {\n    return (\n        <div className={`icon icon-${props.name}`} onDoubleClick={()=>props.onDoubleClick(props.name)}>\n            <img src={`./assets/${props.name}.svg`} width={props.size} height={props.size} alt={props.name} />\n        </div>\n    )\n}\n\nexport default Icon;","import uniqid from 'uniqid';\nimport React, { Component } from 'react';\n\n\nimport Terminal from './components/Terminal/Terminal';\nimport Icon from './components/Icon/Icon';\n\nimport './styles/App.scss';\n\nclass App extends Component {\n\n  state = {\n    directory: \"~/Desktop\",\n    iconSize: 64,\n    windows: {\n      terminal: [\n        {\n          key: uniqid(),\n          x: 60,\n          y: 200\n        }\n      ]\n    }\n  }\n\n  toggleWindow = (key, id) => {\n    let array = [...this.state.windows[key]];\n    let i = array.findIndex(el=>el.key===id);\n    array.splice(i, 1);\n    this.setState({\n      windows: {\n        ...this.state.windows,\n        [key]: array\n      }\n    })\n  }\n\n  openWindow = (key) => {\n    console.log(key);\n    this.setState({\n      windows:{\n        ...this.state.windows,\n        [key]: this.state.windows[key].concat({\n          key: uniqid(),\n          x: 60,\n          y: 200\n        })\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"desktop\">\n          <Icon name=\"terminal\" size={this.state.iconSize} onDoubleClick={this.openWindow}/>\n          {\n            this.state.windows.terminal.map((el, i)=>\n              <Terminal key={el.key} id={el.key} position={el} directory={this.state.directory} toggle={this.toggleWindow} />\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}